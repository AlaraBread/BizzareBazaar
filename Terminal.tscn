[gd_scene load_steps=12 format=2]

[ext_resource path="res://assets/Inconsolata_Expanded-Medium.ttf" type="DynamicFontData" id=1]
[ext_resource path="res://Terminal.gd" type="Script" id=2]
[ext_resource path="res://Art.gd" type="Script" id=3]

[sub_resource type="DynamicFont" id=1]
size = 50
font_data = ExtResource( 1 )

[sub_resource type="DynamicFont" id=2]
size = 22
font_data = ExtResource( 1 )

[sub_resource type="StyleBoxEmpty" id=3]

[sub_resource type="StyleBoxEmpty" id=4]

[sub_resource type="StyleBoxEmpty" id=5]

[sub_resource type="Theme" id=6]
default_font = SubResource( 2 )
Fonts/fonts/large = SubResource( 1 )
Fonts/fonts/normal = SubResource( 2 )
LineEdit/colors/clear_button_color = Color( 0.88, 0.88, 0.88, 1 )
LineEdit/colors/clear_button_color_pressed = Color( 1, 1, 1, 1 )
LineEdit/colors/cursor_color = Color( 0.94, 0.94, 0.94, 1 )
LineEdit/colors/font_color = Color( 0.88, 0.88, 0.88, 1 )
LineEdit/colors/font_color_selected = Color( 0, 0, 0, 1 )
LineEdit/colors/font_color_uneditable = Color( 0.88, 0.88, 0.88, 0.5 )
LineEdit/colors/selection_color = Color( 0.49, 0.49, 0.49, 1 )
LineEdit/constants/minimum_spaces = 12
LineEdit/fonts/font = null
LineEdit/icons/clear = null
LineEdit/styles/focus = SubResource( 3 )
LineEdit/styles/normal = SubResource( 4 )
LineEdit/styles/read_only = SubResource( 5 )

[sub_resource type="Shader" id=7]
code = "/*
Godot 3 2D CRT Shader.
A 2D shader for Godot 3 simulating a CRT..
Author: hiulit
Repository: https://github.com/hiulit/Godot-3-2D-CRT-Shader
Issues: https://github.com/hiulit/Godot-3-2D-CRT-Shader/issues
License: MIT https://github.com/hiulit/Godot-3-2D-CRT-Shader/blob/master/LICENSE
*/

shader_type canvas_item;

const float PI = 3.14159265359;

uniform vec2 screen_size = vec2(320.0, 180.0);
uniform bool show_curvature = true;
uniform float curvature_x_amount : hint_range(3.0, 15.0, 0.01) = float(6.0); 
uniform float curvature_y_amount : hint_range(3.0, 15.0, 0.01) = float(4.0);
uniform vec4 corner_color : hint_color = vec4(0.0, 0.0, 0.0, 1.0);
uniform bool show_vignette = true;
uniform vec4 vignette_color : hint_color = vec4(0.0, 0.0, 0.0, 1.0);
uniform bool show_horizontal_scan_lines = true;
uniform float horizontal_scan_lines_amount : hint_range(0.0, 380.0, 0.1) = 180.0;
uniform float horizontal_scan_lines_opacity : hint_range(0.0, 1.0, 0.01) = 1.0;
uniform bool show_vertical_scan_lines = false;
uniform float vertical_scan_lines_amount : hint_range(0.0, 320.0, 0.1) = 320.0;
uniform float vertical_scan_lines_opacity : hint_range(0.0, 1.0, 0.01) = 1.0;
uniform float boost : hint_range(1.0, 2.0, 0.01) = 1.2;
uniform float aberration_amount : hint_range(0.0, 10.0, 0.01) = 0.0;
uniform bool show_offset = false;
uniform float offset_amount : hint_range(0, 0.2, 0.01) = 0.01;
uniform float offset_speed : hint_range(0, 5, 0.01) = 0.5;

vec2 uv_curve(float time, vec2 uv) {
	if (show_curvature) {
		uv = uv * 2.0 - 1.0;
		vec2 offset = abs(uv.yx) / vec2(curvature_x_amount, curvature_y_amount);
		uv = uv + uv * offset * offset;
		uv = uv * 0.5 + 0.5;
	}
	if(show_offset) {
		uv += vec2((offset_amount*floor(sin(offset_speed*time+(uv.y)))), 0);
	}
	return uv;
}


void fragment() {
	vec2 uv = uv_curve(0, UV);
	vec2 screen_uv = uv_curve(TIME, SCREEN_UV);
	vec3 color = texture(SCREEN_TEXTURE, screen_uv).rgb;

	if (aberration_amount > 0.0) {
		float adjusted_amount = aberration_amount / screen_size.x;
		color.r = texture(SCREEN_TEXTURE, vec2(screen_uv.x + adjusted_amount, screen_uv.y)).r;
		color.g = texture(SCREEN_TEXTURE, screen_uv).g;
		color.b = texture(SCREEN_TEXTURE, vec2(screen_uv.x - adjusted_amount, screen_uv.y)).b;
	}

	if (show_vignette) {
		float vignette = uv.x * uv.y * (1.0 - uv.x) * (1.0 - uv.y);
		vignette = clamp(pow((screen_size.x / 4.0) * vignette, vignette_color.a), 0.0, 1.0);
		color = mix(vignette_color.rgb, color, vignette);
	}

	if (show_horizontal_scan_lines) {
		float s = sin(screen_uv.y * horizontal_scan_lines_amount * PI * 2.0);
		s = (s * 0.5 + 0.5) * 0.9 + 0.1;
		vec4 scan_line = vec4(vec3(pow(s, horizontal_scan_lines_opacity)), 1.0);
		color *= scan_line.rgb;
	}

	if (show_vertical_scan_lines) {
		float s = sin(screen_uv.x * vertical_scan_lines_amount * PI * 2.0);
		s = (s * 0.5 + 0.5) * 0.9 + 0.1;
		vec4 scan_line = vec4(vec3(pow(s, vertical_scan_lines_opacity)), 1.0);
		color *= scan_line.rgb;
	}

	if (show_horizontal_scan_lines || show_vertical_scan_lines) {
		color *= boost;
	}

	// Fill the blank space of the corners, left by the curvature, with black.
	if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) {
		color = corner_color.rgb;
	}

	COLOR = vec4(color, 1.0);
}"

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 7 )
shader_param/screen_size = Vector2( 1024, 600 )
shader_param/show_curvature = true
shader_param/curvature_x_amount = 5.0
shader_param/curvature_y_amount = 5.0
shader_param/corner_color = Color( 0, 0, 0, 1 )
shader_param/show_vignette = true
shader_param/vignette_color = Color( 0, 0, 0, 0.572549 )
shader_param/show_horizontal_scan_lines = true
shader_param/horizontal_scan_lines_amount = 250.0
shader_param/horizontal_scan_lines_opacity = 0.67
shader_param/show_vertical_scan_lines = false
shader_param/vertical_scan_lines_amount = 0.0
shader_param/vertical_scan_lines_opacity = 1.0
shader_param/boost = 1.18
shader_param/aberration_amount = 0.5
shader_param/show_offset = true
shader_param/offset_amount = 0.01
shader_param/offset_speed = 0.5

[node name="Terminal" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
theme = SubResource( 6 )
script = ExtResource( 2 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Art" type="RichTextLabel" parent="."]
anchor_right = 0.5
anchor_bottom = 1.0
scroll_active = false
script = ExtResource( 3 )
__meta__ = {
"_edit_use_anchors_": true
}

[node name="FrameTimer" type="Timer" parent="Art"]
wait_time = 0.5

[node name="Dialogue" type="RichTextLabel" parent="."]
anchor_left = 0.5
anchor_right = 1.0
anchor_bottom = 0.713333
margin_bottom = 48.0
scroll_following = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Inventory" type="RichTextLabel" parent="."]
anchor_left = 0.5
anchor_top = 0.886667
anchor_right = 1.0
anchor_bottom = 1.0
margin_top = -3.05176e-05
margin_bottom = -6.10352e-05
text = "Inventory"
__meta__ = {
"_edit_use_anchors_": true
}

[node name="Input" type="LineEdit" parent="."]
anchor_left = 0.527344
anchor_top = 0.793333
anchor_right = 0.999828
anchor_bottom = 0.838333
margin_right = 0.175964
margin_bottom = -3.05176e-05
context_menu_enabled = false
caret_blink = true
__meta__ = {
"_edit_use_anchors_": true
}

[node name="InputArrow" type="RichTextLabel" parent="."]
anchor_left = 0.5
anchor_top = 0.793
anchor_right = 0.527
anchor_bottom = 0.842
margin_top = 0.199982
margin_right = 0.35199
margin_bottom = -0.200043
text = ">"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="CRT" type="ColorRect" parent="."]
material = SubResource( 8 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[connection signal="timeout" from="Art/FrameTimer" to="Art" method="_on_FrameTimer_timeout"]
[connection signal="text_entered" from="Input" to="." method="_on_Input_text_entered"]
